{"version":3,"sources":["components/Square/index.js","components/Button/index.js","components/Board/index.js","components/Game/Game.js","reportWebVitals.js","index.js"],"names":["Square","value","handleClick","className","onClick","Button","newGame","calculateWinner","squares","lines","i","length","a","b","c","Board","useState","Array","fill","setSquares","xIsNext","setXIsNext","renderSquare","index","gridSquares","slice","console","log","status","winner","includes","Game","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAaeA,MAXf,YAAyC,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YACrB,OACI,wBACIC,UAAU,SACVC,QAASF,EAFb,SAIKD,KCAEI,MANf,YAA8B,IAAZC,EAAW,EAAXA,QACd,OACI,wBAAQF,QAASE,EAASH,UAAU,eAApC,uBCsER,SAASI,EAAgBC,GAWrB,IAVA,IAAMC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACjBD,EAAMC,GADW,GAC5BE,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GAClE,OAAON,EAAQI,GAGvB,OAAO,KAIIG,MA3Ff,WAAkB,IAAD,EACiBC,mBAASC,MAAM,GAAGC,KAAK,OADxC,mBACNV,EADM,KACGW,EADH,OAEiBH,oBAAS,GAF1B,mBAENI,EAFM,KAEGC,EAFH,KAyBb,SAASC,EAAaZ,GAClB,OACI,cAAC,EAAD,CAAQT,MAAOO,EAAQE,GAAIR,YAAa,kBAlBhD,SAAqBqB,GACjB,IAAIhB,EAAgBC,KAAYA,EAAQe,GAAxC,CAGA,IAAgB,IAAZH,EAAkB,CAClB,IAAMI,EAAW,sBAAOhB,EAAQiB,MAAM,EAAGF,IAAxB,CAAgC,KAAhC,YAAwCf,EAAQiB,MAAMF,EAAQ,KAC/EJ,EAAWK,OAEV,CACD,IAAMA,EAAW,sBAAOhB,EAAQiB,MAAM,EAAGF,IAAxB,CAAgC,KAAhC,YAAwCf,EAAQiB,MAAMF,EAAQ,KAC/EJ,EAAWK,GAEfH,GAAYD,GACZM,QAAQC,IAAInB,IAKsCN,CAAYQ,MAxBlEgB,QAAQC,IAAInB,GA4BZ,IACIoB,EADEC,EAAStB,EAAgBC,GAa/B,OAVIoB,EADAC,EACM,kBAAcA,IAEY,IAA3BrB,EAAQsB,SAAS,MACb,uBAIH,uBAAmBV,EAAU,IAAM,KAIzC,sBAAKjB,UAAU,iBAAf,UACI,qBAAKA,UAAU,SAAf,SAAyByB,IACzB,sBAAKzB,UAAU,YAAf,UACKmB,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKnB,UAAU,YAAf,UACKmB,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKnB,UAAU,YAAf,UACKmB,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,8BACI,cAAC,EAAD,CAAQhB,QA1DpB,WACIa,EAAWF,MAAM,GAAGC,KAAK,OACzBG,GAAW,YCMJU,MAdf,WACE,OACE,qBAAK5B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKA,UAAU,SAAf,UACE,sDACA,yHAEF,cAAC,EAAD,UCCO6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.381e88cf.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square({ value, handleClick }) {\n    return (\n        <button \n            className=\"square\" \n            onClick={handleClick}\n        >\n            {value}\n        </button >\n    )\n}\n\nexport default Square;","import React from 'react';\n\nfunction Button({ newGame }) {\n    return (\n        <button onClick={newGame} className=\"reset-button\">New Game</button>\n    )\n}\n\nexport default Button\n","import React, { useState } from 'react';\nimport Square from '../Square/';\nimport Button from '../Button/';\n\nfunction Board() {\n    const [squares, setSquares] = useState(Array(9).fill(null));\n    const [xIsNext, setXIsNext] = useState(true); //start with 'X'\n    console.log(squares);\n\n    function newGame() {\n        setSquares(Array(9).fill(null))\n        setXIsNext(true)\n    }\n    function handleClick(index) {\n        if (calculateWinner(squares) || squares[index]) {\n            return;\n        }\n        if (xIsNext === true) {\n            const gridSquares = [...squares.slice(0, index), 'X', ...squares.slice(index + 1)];\n            setSquares(gridSquares);\n        }\n        else {\n            const gridSquares = [...squares.slice(0, index), 'O', ...squares.slice(index + 1)];\n            setSquares(gridSquares);\n        }\n        setXIsNext(!xIsNext); // change turns\n        console.log(squares);\n    }\n\n    function renderSquare(i) {\n        return (\n            <Square value={squares[i]} handleClick={() => handleClick(i)} />\n        )\n    }\n\n    const winner = calculateWinner(squares);\n    let status;\n    if (winner) {\n        status = `Winner: ${winner}`;\n    }\n    else if (squares.includes(null) === false) {\n        status = \"No winner! Try again\"\n    }\n\n    else {\n        status = `Next player: ${xIsNext ? 'X' : 'O'}`\n    }\n\n    return (\n        <div className=\"grid-container\">\n            <div className=\"status\">{status}</div>\n            <div className=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n            <div>\n                <Button newGame={newGame}></Button>\n\n            </div>\n        </div>\n    )\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n\n}\n\nexport default Board;","import \"./Game.css\";\nimport Board from '../Board';\n\nfunction Game() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"titles\">\n          <h1>Noughts and Crosses!</h1>\n          <h5>Realistic tile shifting O's-and-X's game! Can you keep your calm, as the tiles spin?</h5>\n        </div>\n        <Board />\n      </header>\n    </div>\n  );\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game/Game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}